@model CharacterInfoViewModel

@{
    ViewData["Title"] = "Tasks";
}

<div class="test"></div>
<div id="notify-box">
</div>
<div class="character-container">
    <div class="character-box">
        @{
            IEnumerable<Equipment> wearing = Model.Character.InventorySlot.Where(i => i.Wearing == true).Select(i => i.Equipment);
            if (wearing != null)
            {
                <img src="~/images/Characters/Shadow.gif" />
                if (wearing.OfType<Gear>().Any(g => g.GearType.Name == "Back"))
                {
                    <img src="~/images/Equipment/@(wearing.OfType<Gear>().SingleOrDefault(g => g.GearType.Name == "Back").Image).gif" />
                }
                <img src="~/images/Characters/Body.gif" />
                if (wearing.OfType<Gear>().Any(g => g.GearType.Name == "Leggings"))
                {
                    <img src="~/images/Equipment/@(wearing.OfType<Gear>().SingleOrDefault(g => g.GearType.Name == "Leggings").Image).gif" />
                }
                if (wearing.OfType<Gear>().Any(g => g.GearType.Name == "Chestplate"))
                {
                    <img src="~/images/Equipment/@(wearing.OfType<Gear>().SingleOrDefault(g => g.GearType.Name == "Chestplate").Image).gif" />
                }
                if (wearing.OfType<Gear>().Any(g => g.GearType.Name == "Helmet"))
                {
                    <img src="~/images/Equipment/@(wearing.OfType<Gear>().SingleOrDefault(g => g.GearType.Name == "Helmet").Image).gif" />
                }
                if (wearing.OfType<Weapon>().Any())
                {
                    <img src="~/images/Equipment/@(wearing.OfType<Weapon>().SingleOrDefault().Image).gif" />
                }
            }
            else
            {
                <img src="~/images/Characters/Shadow.gif" />
                <img src="~/images/Characters/Body.gif" />
            }
        }
    </div>
    <div class="character-info">
        <h2 style="margin-top: 13px;">@Model.Character.Name</h2>
        <h3 id="level">Level</h3>
        <div class="progress-box">
            <div class="progress" id="xp-bar">
                <div class="progress-val">
                    <p>0</p>
                </div>
                <span class="progress-tooltip">Experience</span>
            </div>
            <p class="progress-max">0</p>
        </div>
        <div class="progress-box">
            <div class="progress" id="health-bar">
                <div class="progress-val">
                    <p>100</p>
                </div>
                <span class="progress-tooltip">Health</span>
            </div>
            <p class="progress-max">100</p>
        </div>
        <div class="coin-box">
            <img src="~/images/Mysticoin.svg"/>
            <p>@Model.Character.Coins</p>
        </div>
    </div>
</div>

<div class="tasks">
    <div class="tasks-box">
        <div class="tasks-box-top">
            <p>Daily Tasks</p>
            <button onClick="AddTask(this.id)" class="add-task-button" id="add-daily">
                <div class="rect-vert"></div>
                <div class="rect-hori"></div>
            </button>
        </div>
        <div class="task-container" id="daily-container">
            @for (int i = 0; i < Model.DailyTasks.Count; i++)
            {
                <div class="task @(Model.DailyTasks[i].Done.Value ? "done" : "")" id="d@(Model.DailyTasks[i].Id)" draggable="true">
                    <button onClick="DailyCheck(this.parentElement.id)" class="task-tick-button" @(Model.DailyTasks[i].Done.Value ? "disabled" : "")>
                        <div class="tick-box">
                            <div class="tick-left"></div>
                            <div class="tick-right"></div>
                        </div>
                    </button>
                    <p>@Model.DailyTasks[i].Name</p>
                    <div class="dropdown">
                        <button class="dropdown-button dropdown-button-tasks" onclick="Dropdown(this)"></button>
                        <div class="dropdown-menu">
                            <button class="dropdown-item" onclick="DeleteTask(this.parentElement.parentElement.parentElement, @Model.DailyTasks[i].Id, 'daily')">
                                <img src="~/images/Trashcan.svg" />
                                <p style="color:red">Delete</p>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="tasks-box">
        <div class="tasks-box-top">
            <p>Habits</p>
            <button onClick="AddTask(this.id)" class="add-task-button" id="add-habit">
                <div class="rect-vert"></div>
                <div class="rect-hori"></div>
            </button>
        </div>
        <div class="task-container" id="habit-container">
            @for (int i = 0; i < Model.Habits.Count; i++)
            {
                <div class="task" id="h@(Model.Habits[i].Id)" draggable="true">
                    <button onClick="HabitPositive(this.parentElement.id)" class="habit-button">
                        <div class="habit-button-box">
                            <div class="habit-vert"></div>
                            <div class="habit-hori"></div>
                        </div>
                    </button>
                    <p>@Model.Habits[i].Name</p>
                    <div class="dropdown">
                        <button class="dropdown-button dropdown-button-tasks" onclick="Dropdown(this)"></button>
                        <div class="dropdown-menu">
                            <button class="dropdown-item" onclick="DeleteTask(this.parentElement.parentElement.parentElement, @Model.Habits[i].Id, 'habit')">
                                <img src="~/images/Trashcan.svg" />
                                <p style="color:red">Delete</p>
                            </button>
                        </div>
                    </div>
                    <button onClick="HabitNegative(this.parentElement.id)" class="habit-button habit-button-negative">
                        <div class="habit-button-box">
                            <div class="habit-hori"></div>
                        </div>
                    </button>
                </div>
            }
        </div>
    </div>
    <div class="tasks-box">
        <div class="tasks-box-top">
            <p>To-Do's</p>
            <button onClick="AddTask(this.id)" class="add-task-button" id="add-todo">
                <div class="rect-vert"></div>
                <div class="rect-hori"></div>
            </button>
        </div>
        <div class="task-container" id="todo-container">
            @for (int i = 0; i < Model.ToDos.Count; i++)
            {
                <div class="task" id="t@(Model.ToDos[i].Id)" draggable="true">
                    <button onClick="TodoCheck(this.parentElement.id)" class="task-tick-button todo-button">
                        <div class="tick-box">
                            <div class="tick-left"></div>
                            <div class="tick-right"></div>
                        </div>
                    </button>
                    <p>@Model.ToDos[i].Name</p>
                    <div class="dropdown">
                        <button class="dropdown-button dropdown-button-tasks" onclick="Dropdown(this)"></button>
                        <div class="dropdown-menu">
                            <button class="dropdown-item" onclick="DeleteTask(this.parentElement.parentElement.parentElement, @Model.ToDos[i].Id, 'todo')">
                                <img src="~/images/Trashcan.svg" />
                                <p style="color:red">Delete</p>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts{
    <script id="addtask" type="text/html">
        <div class="task" id="new-task">
            <input type="text" name="taskname" class="add-task-input" id="new-task-input" />
            <button onClick="AddNewTask(this.id)" class="new-task-button" id="newtask">
                <div class="tick-box">
                    <div class="new-task-vert"></div>
                    <div class="new-task-hori"></div>
                </div>
            </button>
        </div>
    </script>

    <script>
        var maxxp, currentxp, xppercent;
        var maxhealth, currenthealth, healthpercent;

        UpdateExpBar();
        UpdateHealthBar();
        UpdateLevel();


        function UpdateExpBar() {
            $.post("@Url.Action("GetNextLvlExp", "Character")", function (xp) {
                maxxp = xp;
                $.post("@Url.Action("GetCurrentExp", "Character")", function (xp) {
                    currentxp = xp;
                    xppercent = currentxp / maxxp * 100;
                    var valbox = $(document.getElementById("xp-bar")).children().first();
                    valbox.width(xppercent + "%");
                    var val = valbox.children().first();
                    val.text(currentxp);
                    var maxval = $(document.getElementById("xp-bar")).parent().children(".progress-max").first();
                    maxval.text(maxxp);
                    if (xppercent < 10) {
                        val.css("margin-left", val.width() + 8 + "px");
                        valbox.css("justify-content", "flex-end");
                    }
                    else {
                        valbox.css("justify-content", "center");
                        val.css("margin-left", "0px");
                    }
                });
            });
        }


        function UpdateHealthBar() {
            $.post("@Url.Action("GetMaxHealth", "Character")", function (health) {
                maxhealth = health;
                $.post("@Url.Action("GetCurrentHealth", "Character")", function (health) {
                    currenthealth = health;
                    healthpercent = currenthealth / maxhealth * 100;
                    var valbox = $(document.getElementById("health-bar")).children().first();
                    valbox.width(healthpercent + "%");
                    var val = valbox.children().first();
                    val.text(currenthealth);
                    var maxval = $(document.getElementById("health-bar")).parent().children(".progress-max").first();
                    maxval.text(maxhealth);
                    if (healthpercent < 10) {
                        val.css("margin-left", val.width() + 8 + "px");
                        valbox.css("justify-content", "flex-end");
                    }
                    else {
                        valbox.css("justify-content", "center");
                        val.css("margin-left", "0px");
                    }
                });
            });
        }

        function UpdateLevel() {
            $.post("@Url.Action("GetCurrentLevel", "Character")", function (level) {
                document.getElementById("level").innerHTML = "Level " + level;
            });
        }

        function DailyCheck(id) {
            var taskId = id.substr(1);
            $.post("@Url.Action("CheckDaily", "Task")", { id: taskId }, function (taskreturn) {
                UpdateCharacter(taskreturn.xp, taskreturn.damage);
                var button = $("#" + id).children("button").first();
                console.log($("#" + id));
                button.children().first().children().first().css("transition", "background-color 1s ease");
                button.children().first().children().last().css("transition", "background-color 1s ease");
                button.attr("disabled", true);
                button.parent().addClass("done");
            });
        }

        function TodoCheck(id) {
            console.log($("#" + id));
            var taskId = id.substr(1);
            $.post("@Url.Action("CheckTodo", "Task")", { id: taskId }, function (taskreturn) {
                UpdateCharacter(taskreturn.xp, taskreturn.damage);
                var button = $("#" + id).children("button").first();
                button.children().children().first().css("transition", "background-color 1s ease");
                button.children().children().last().css("transition", "background-color 1s ease");
                $("#" + id).fadeOut("normal", function () {
                    $(this).remove();
                });
            });
        }

        function HabitPositive(id) {
            var taskId = id.substr(1);
            $.post("@Url.Action("PositiveHabit", "Task")", { id: taskId }, function (taskreturn) {
                UpdateCharacter(taskreturn.xp, taskreturn.damage);
                var button = $("#" + id).children("button").first();
                button.parent().removeClass("negative");
                button.parent().addClass("positive");
            });
        }

        function HabitNegative(id) {
            var taskId = id.substr(1);
            $.post("@Url.Action("NegativeHabit", "Task")", { id: taskId }, function (taskreturn) {
                UpdateCharacter(taskreturn.xp, taskreturn.damage);
                var button = $("#" + id).children("button").last();
                button.parent().removeClass("positive");
                button.parent().addClass("negative");
            });

        }

        function UpdateCharacter(xp, damage) {
            var expblock = $(document.createElement('div'));
            expblock.addClass("notify");
            var exptext = expblock.append(document.createElement('p')).children().last();
            if (xp < 0) {
                exptext.text("- " + Math.abs(xp) + " exp.");
            }
            else {
                exptext.text("+ " + xp + " exp.");
            }
            var expimg = expblock.append(document.createElement('img')).children().last();
            expimg.attr("src", "/images/ExpIcon.svg");
            expblock.hide();
            expblock.fadeIn(400, function () {
                $(this).delay(2500).fadeOut(400, function () {
                    $(this).remove();
                });
            });
            $("#notify-box").append(expblock);

            if (damage != 0) {
                AddDamage(damage);
            }
            UpdateExpBar();
            UpdateLevel();
            UpdateHealthBar();
        }

        function AddDamage(damage) {
            var expblock = $(document.createElement('div'));
            expblock.addClass("notify damage-notify");
            var exptext = expblock.append(document.createElement('p')).children().last();
            if (damage < 0) {
                exptext.text("- " + Math.abs(damage) + " damage done.");
            }
            else {
                exptext.text(damage + " damage done.");
            }
            var expimg = expblock.append(document.createElement('img')).children().last();
            expimg.attr("src", "/images/BloodDrop.svg");
            expblock.hide();
            expblock.fadeIn(400, function () {
                $(this).delay(2500).fadeOut(400, function () {
                    $(this).remove();
                });
            });
            $("#notify-box").append(expblock);
        }

        function AddTask(id) {
            $("#" + id).hide();
            if (id == "add-daily") {
                newTaskType = 'daily';
                var newdiv = document.getElementById('addtask').innerHTML;
                $("#daily-container").append(newdiv);
                var topPos = document.getElementById('new-task').offsetTop;
                document.getElementById('daily-container').scrollTop = topPos;
                $("#newtask").attr("id", "newdaily");
            }
            if (id == "add-habit") {
                newTaskType = 'habit';
                var newdiv = document.getElementById('addtask').innerHTML;
                $("#habit-container").append(newdiv);
                var topPos = document.getElementById('new-task').offsetTop;
                document.getElementById('habit-container').scrollTop = topPos;
                $("#newtask").attr("id", "newhabit");
            }
            if (id == "add-todo") {
                newTaskType = 'todo';
                var newdiv = document.getElementById('addtask').innerHTML;
                $("#todo-container").append(newdiv);
                var topPos = document.getElementById('new-task').offsetTop;
                document.getElementById('todo-container').scrollTop = topPos;
                $("#newtask").attr("id", "newtodo");
            }
            $("#new-task-input").focus();
            document.getElementById("new-task-input").addEventListener("keyup", function (event) {
                if (event.keyCode === 13) {
                    AddNewTask($(".new-task-button").attr("id"));
                }
            });
        }

        function AddNewTask(newid) {
            if (document.getElementById('new-task-input').value != "") {
                if (newid == "newdaily") {
                    $.post("@Url.Action("AddDaily","Task")", { name: document.getElementById('new-task-input').value }, function (id) {
                        var task = $(document.createElement('div'));
                        task.addClass("task");
                        task.attr("id", "d" + id);
                        var button = task.append(document.createElement('button')).children().last();
                        button.addClass("task-tick-button");
                        button.attr("onclick", 'DailyCheck(this.parentElement.id)');
                        var tickbox = button.append(document.createElement('div')).children().last();
                        tickbox.addClass("tick-box");
                        var tickl = tickbox.append(document.createElement('div')).children().last();
                        tickl.addClass("tick-left");
                        var tickr = tickbox.append(document.createElement('div')).children().last();
                        tickr.addClass("tick-right");
                        var name = task.append(document.createElement('p')).children().last();
                        name.text(document.getElementById('new-task-input').value);
                        var dropdown = task.append(document.createElement('div')).children().last();
                        dropdown.addClass("dropdown");
                        var dropdownbutton = dropdown.append(document.createElement('button')).children().last();
                        dropdownbutton.addClass("dropdown-button dropdown-button-tasks");
                        dropdownbutton.attr("onclick", 'Dropdown(this)');
                        var dropdownmenu = dropdown.append(document.createElement('div')).children().last();
                        dropdownmenu.addClass("dropdown-menu");
                        var dropdownitem = dropdownmenu.append(document.createElement('button')).children().last();
                        dropdownitem.addClass("dropdown-item");
                        dropdownitem.attr("onclick", "DeleteTask(this.parentElement.parentElement.parentElement, " + id + ", 'daily')");
                        var dropdownimg = dropdownitem.append(document.createElement('img')).children().last();
                        dropdownimg.attr("src", "/images/Trashcan.svg");
                        var dropdowntext = dropdownitem.append(document.createElement('p')).children().last();
                        dropdowntext.text("Delete");
                        dropdowntext.css("color", "red");

                        $(document.getElementById('daily-container')).append(task);

                        $("#new-task").remove();
                        $(".add-task-button").show();
                    });
                }

                if (newid == "newhabit") {
                    $.post("@Url.Action("AddHabit","Task")", { name: document.getElementById('new-task-input').value }, function (id) {
                        var task = $(document.createElement('div'));
                        task.addClass("task");
                        task.attr("id", "h" + id);
                        var button1 = task.append(document.createElement('button')).children().last();
                        button1.addClass("habit-button");
                        button1.attr("onclick", 'HabitPositive(this.parentElement.id)');
                        var buttonbox1 = button1.append(document.createElement('div')).children().last();
                        buttonbox1.addClass("habit-button-box");
                        var vert1 = buttonbox1.append(document.createElement('div')).children().last();
                        vert1.addClass("habit-vert");
                        var hori1 = buttonbox1.append(document.createElement('div')).children().last();
                        hori1.addClass("habit-hori");
                        var name = task.append(document.createElement('p')).children().last();
                        name.text(document.getElementById('new-task-input').value);
                        var dropdown = task.append(document.createElement('div')).children().last();
                        dropdown.addClass("dropdown");
                        var dropdownbutton = dropdown.append(document.createElement('button')).children().last();
                        dropdownbutton.addClass("dropdown-button dropdown-button-tasks");
                        dropdownbutton.attr("onclick", 'Dropdown(this)');
                        var dropdownmenu = dropdown.append(document.createElement('div')).children().last();
                        dropdownmenu.addClass("dropdown-menu");
                        var dropdownitem = dropdownmenu.append(document.createElement('button')).children().last();
                        dropdownitem.addClass("dropdown-item");
                        dropdownitem.attr("onclick", "DeleteTask(this.parentElement.parentElement.parentElement, " + id + ", 'daily')");
                        var dropdownimg = dropdownitem.append(document.createElement('img')).children().last();
                        dropdownimg.attr("src", "/images/Trashcan.svg");
                        var dropdowntext = dropdownitem.append(document.createElement('p')).children().last();
                        dropdowntext.text("Delete");
                        dropdowntext.css("color", "red");
                        var button2 = task.append(document.createElement('button')).children().last();
                        button2.addClass("habit-button");
                        button2.addClass("habit-button-negative");
                        button2.attr("onclick", 'HabitNegative(this.parentElement.id)');
                        button2.attr("id", id);
                        var buttonbox2 = button2.append(document.createElement('div')).children().last();
                        buttonbox2.addClass("habit-button-box");
                        var hori2 = buttonbox2.append(document.createElement('div')).children().last();
                        hori2.addClass("habit-hori");
                        $(document.getElementById('habit-container')).append(task);

                        $("#new-task").remove();
                        $(".add-task-button").show();
                    });
                }
                if (newid == "newtodo") {
                    $.post("@Url.Action("AddTodo","Task")", { name: document.getElementById('new-task-input').value }, function (id) {
                        var task = $(document.createElement('div'));
                        task.addClass("task");
                        task.attr("id", "t" + id);
                        var button = task.append(document.createElement('button')).children().last();
                        button.addClass("task-tick-button");
                        button.addClass("todo-button");
                        button.attr("onclick", 'TodoCheck(this.parentElement.id)');
                        var tickbox = button.append(document.createElement('div')).children().last();
                        tickbox.addClass("tick-box");
                        var tickl = tickbox.append(document.createElement('div')).children().last();
                        tickl.addClass("tick-left");
                        var tickr = tickbox.append(document.createElement('div')).children().last();
                        tickr.addClass("tick-right");
                        var name = task.append(document.createElement('p')).children().last();
                        name.text(document.getElementById('new-task-input').value);
                        var dropdown = task.append(document.createElement('div')).children().last();
                        dropdown.addClass("dropdown");
                        var dropdownbutton = dropdown.append(document.createElement('button')).children().last();
                        dropdownbutton.addClass("dropdown-button dropdown-button-tasks");
                        dropdownbutton.attr("onclick", 'Dropdown(this)');
                        var dropdownmenu = dropdown.append(document.createElement('div')).children().last();
                        dropdownmenu.addClass("dropdown-menu");
                        var dropdownitem = dropdownmenu.append(document.createElement('button')).children().last();
                        dropdownitem.addClass("dropdown-item");
                        dropdownitem.attr("onclick", "DeleteTask(this.parentElement.parentElement.parentElement, " + id + ", 'daily')");
                        var dropdownimg = dropdownitem.append(document.createElement('img')).children().last();
                        dropdownimg.attr("src", "/images/Trashcan.svg");
                        var dropdowntext = dropdownitem.append(document.createElement('p')).children().last();
                        dropdowntext.text("Delete");
                        dropdowntext.css("color", "red");

                        $(document.getElementById('todo-container')).append(task);

                        $("#new-task").remove();
                        $(".add-task-button").show();
                    });
                }
            }
            else {
                $("#new-task").remove();
            }
        }

        function Dropdown(b) {
            var dropdown = b.parentElement;
            dropdown.classList.toggle('show');
            if (dropdown.classList.contains('dropup')) {
                dropdown.classList.remove('dropup');
            }
            var menu = $(dropdown).children().last();
            if ((($(dropdown).parent().parent().offset().top + $(dropdown).parent().parent().innerHeight()) - (menu.offset().top + menu.height())) < 20) {
                dropdown.classList.toggle('dropup');
            }

        }

        function DeleteTask(taskdiv, id, tasktype) {
            var c = confirm("Are you sure you want to delete this task?");
            if (c) {
                $.post("@Url.Action("DeleteTask", "Task")", { id: id, type: tasktype }, function () {
                    $(taskdiv).remove();
                });
            }
        }

        $(document).mouseup(function (e) {
            if ($("#new-task").length != 0) {
                var container = $("#new-task");

                // if the target of the click isn't the container nor a descendant of the container
                if (!container.is(e.target) && container.has(e.target).length === 0) {
                    if (!$("#new-task-input").is(':focus')) {
                        $("#new-task").remove();
                        $(".add-task-button").show();
                    }
                }
            }
            var dropdowns = document.getElementsByClassName("dropdown");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    if (!$(openDropdown).children("button").first().is($(e.target).first())) {
                        openDropdown.classList.remove('show');
                        if (openDropdown.classList.contains('dropup')) {
                            openDropdown.classList.remove('dropup');
                        }
                    }
                }
            }
        });
    </script>
}